####################################### sprat_red_flcor ###########################################

Usage:  spflcor input_file
		input_exptime
		input_start_wav
		input_dispersion
		acq_image_counts
		acq_wav_min
		acq_wav_max
                flcor_file
		tel_thput
                output_file

Parameters named input_ refer to the spectrum being corrected and those named acq_ relate to 
the final acquisition image. Parameter tel_thput is intrinsic to the telescope optics and
thus affects everything equally. 

Synopsis:

Apply the wavelength dependent flux calibration.

Description:

The [input_file] is multiplied through by the [flcor_file] which must be a two-dimentional
array with NAXIS1 the same as [input_file] and NAXIS2=1. The [input_file] is a two-dimentional
array with NAXIS1 the same as [flcor_file] but NAXIS2 may be extended. The correction is applied
to all pixel rows.

The two inputs [input_file] and [flcor_file] must have identical dispersions but this is not
checked. I.e., the [flcor_file] is expected to be generated from extractions that originated 
in this pipeline. As a future enahancement it ought to be possible to use sprebin to first
resample [flcor_file] to match [input_file] before applying the correction.

The flux calibration [flcor_file] as read from disk converts from 
	ADU / sec on sprat
to
	flux density in W/m2/A
I.e., Simply multiplying a 1sec SPRAT SPEC_SS by the transformation curve will yield the 
full calibration.

The calibration is only correct at the time it is forst constructed. As the telescope primary
mirror degrades over time, the absolute calibration will drift. Assuming the degradation
is perfectly grey, [flcor_file] is divided by [tel_thput] before use.  Whenever a new flcor 
calibration is created [tel_thput] gets reset to unity and [flcor_file] used as is. 

Simple product of [input_file] and [flcor_file] would be correct for perfect 1sec observation
on a photometric night with no slit losses. This simple product is then normalised in
in one of two different ways.

acq_image_counts == 0
	Normalize in the range FLAMBDA_NORM_RANGE_LOW < lambda < FLAMBDA_NORM_RANGE_HIGH
	which gives us relative F_lambda, but no absolute flux calibration units. 
	FLAMBDA_NORM_RANGE_LOW, FLAMBDA_NORM_RANGE_HIGH set in compile time header files
	but can be moved to command line if needed.

acq_image_counts != 0
	Use counts from the acquisition image to get a true flux density calibration.
	The spectrum is scaled so that the total ADU in SPEC_SS between [acq_wav_min] and
	[acq_wav_min] is the same as seen in the acquisition image ([acq_image_counts]).
	Note that [acq_image_counts] must be 'sprat-equivalent' counts. If acquisition
	was performed with some other camera then the ADU much be cvonverted for gain
	and QE to be the counts you would have expected in a 1sec sprat image. When 
	acquisition camera is SPRAT set acq_wav_min = acq_wav_min = 0 to sum the entire SPEC_SS.

[input_file] and [flcor_file] must both have the same [input_start_wav] and [input_dispersion].


input_exptime is not currently used.

If successful, the program will produce a text file [SPFLCOR_OUTPUTF] which currently contains
nothing useful, but can be extended to contain diagnostic logging.

Example: 

SPRAT v_q acquisition:
  spflcor v_s_20160408_51_1_0_1_target_tr_cor_reb_ex_ss.fits 1 4020 9.2 100000    0    0 red_cal.fits v_s_20160408_51_1_0_1_target_tr_cor_reb_ex_ss_flcor.fits 

IOO r-band h_q acquisition:
  spflcor v_s_20160408_51_1_0_1_target_tr_cor_reb_ex_ss.fits 1 4020 9.2 100000 5000 7000 red_cal.fits v_s_20160408_51_1_0_1_target_tr_cor_reb_ex_ss_flcor.fits 

###################################################################################################
